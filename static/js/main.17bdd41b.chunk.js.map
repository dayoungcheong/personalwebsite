{"version":3,"sources":["Projects.js","Homepage.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Projects","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","setState","console","log","react_default","a","createElement","className","map","d","index","reactstrap_es","href","link","name","description","Component","Homepage","About","App","HashRouter","Fragment","Link","to","Route","path","component","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uTAIaA,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,KAAM,IAHKR,EADvB,OAAAC,OAAAQ,EAAA,EAAAR,CAAAJ,EAAAC,GAAAG,OAAAS,EAAA,EAAAT,CAAAJ,EAAA,EAAAc,IAAA,oBAAAC,MAAA,WAOwB,IAAAC,EAAAV,KAChBW,IAAO,qBAAqBC,KAAK,SAAAP,GAC7BK,EAAKG,SAAS,CACVR,KAAMA,QAVtB,CAAAG,IAAA,SAAAC,MAAA,WAgBQ,OADAK,QAAQC,IAAIf,KAAKI,MAAMC,MAChBW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,yBACEnB,KAAKI,MAAMC,KAAKe,IAAI,SAACC,EAAGC,GACzB,OACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACCP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAWP,EAAAC,EAAAC,cAAA,KAAGM,KAAMH,EAAEI,KAAMjB,IAAKc,GAAQD,EAAEK,OAC3CV,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAWF,EAAEM,sBAtBtCjC,EAAA,CAA8BkC,aCHxBC,mLAEE,OACIb,EAAAC,EAAAC,cAAA,4CAHWU,aCAjBE,mLAEE,OACId,EAAAC,EAAAC,cAAA,+DAHQU,aCyBLG,mLAhBP,OAAQf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACIhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,SAAP,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAG,KAAT,QACAnB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAG,UAAT,SACAnB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAG,aAAT,YACAnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWR,IAChCd,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAW5C,IACnCsB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAK,IAAIC,UAAWT,cAVvCD,aCIZY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnC,KAAK,SAAAwC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlD,QACf6C,UAAUC,cAAcO,YAI1B3C,QAAQC,IACN,gHAKEiC,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBtC,QAAQC,IAAI,sCAGRiC,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BQ,MAAM,SAAAC,GACL/C,QAAQ+C,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,mBAAwB1B,OAAOC,SAASnB,MACpD6C,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,mBAAN,sBAEP5B,GAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,GACHnC,KAAK,SAAA6D,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAMnE,KAAK,SAAAwC,GACjCA,EAAa4B,aAAapE,KAAK,WAC7B8B,OAAOC,SAASsC,aAKpBnC,EAAgBC,EAAOC,KAG1BY,MAAM,WACL9C,QAAQC,IACN,mEArFAmE,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMnE,KAAK,WACjCE,QAAQC,IACN,+GAMJ+B,EAAgBC,EAAOC,MC3C/BE","file":"static/js/main.17bdd41b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { Card, Button, CardBody, CardTitle, CardText, Col } from 'reactstrap';\r\n\r\nexport class Projects extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        d3.csv('data/projects.csv').then(data => {\r\n            this.setState({\r\n                data: data\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        console.log(this.state.data)\r\n        return <div className=\"container\"> My Hackathon Projects\r\n                {this.state.data.map((d, index) => {\r\n                return (\r\n                    <Card>\r\n                     <CardBody>\r\n                         <CardTitle><a href={d.link} key={index}>{d.name}</a></CardTitle>\r\n                         <CardText>{d.description}</CardText>\r\n                     </CardBody>\r\n\r\n                 </Card>\r\n\r\n                )\r\n                })}\r\n               </div>\r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nclass Homepage extends Component {\r\n    render() {\r\n        return(\r\n            <div>Welcome to my website!</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport {Homepage};","import React, {Component} from 'react';\r\nclass About extends Component {\r\n    render() {\r\n        return(\r\n            <div>I'm a junior in the Informatics Major :-)</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport {About};","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {Projects} from './Projects';\nimport {Homepage} from './Homepage';\nimport {About} from './About'\n\nclass App extends Component {\n    render() {\n        return (<div>\n                  <Router>\n                      <React.Fragment>\n                        <Link to=\"/\">Home</Link>\n                        <Link to=\"/about\">About</Link>\n                        <Link to=\"/projects\">Projects</Link>\n                        <Route path=\"/about\" component={About}/>\n                        <Route path=\"/projects\" component={Projects}/>\n                        <Route exact path=\"/\" component={Homepage}/>\n                      </React.Fragment>\n                  </Router>\n                </div>\n            );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();"],"sourceRoot":""}